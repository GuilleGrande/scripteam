name: 🔧 API Backend Deploy

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/api/**'
      - 'packages/shared/**'
      - 'docker-compose*.yml'
      - '.github/workflows/api-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/api/**'
      - 'packages/shared/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-build:
    name: 🧪 Test & Build API
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scripteam_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📚 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔧 Build shared packages
        run: npm run build --workspace=packages/shared

      - name: 🧪 Run API tests
        run: npm run test --workspace=apps/api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/scripteam_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: ✅ TypeScript check
        run: npm run typecheck --workspace=apps/api

      - name: 🎨 Lint check
        run: npm run lint --workspace=apps/api

      - name: 🏗️ Build API
        run: npm run build --workspace=apps/api

  docker-build:
    name: 🐳 Build Docker Images
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: 📚 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/api
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: 🏗️ Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: [test-and-build, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📚 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Hostinger VPS (Staging)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOSTINGER_STAGING_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          script: |
            cd /opt/scripteam-staging
            git pull origin develop
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d --remove-orphans
            docker system prune -f

  deploy-production:
    name: 🏭 Deploy to Production
    needs: [test-and-build, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📚 Checkout
        uses: actions/checkout@v4

      - name: 🏭 Deploy to Hostinger VPS (Production)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOSTINGER_PROD_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          script: |
            cd /opt/scripteam-production
            git pull origin main
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            docker system prune -f

      - name: 🔍 Health check
        run: |
          sleep 30
          curl -f https://api.scripteam.bigapps.dev/health || exit 1

      - name: 📊 Notify deployment success
        run: |
          echo "✅ API successfully deployed to production"